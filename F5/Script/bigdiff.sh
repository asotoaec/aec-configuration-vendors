#!/bin/bash

# Author: Leonardo Souza
# Version: 2.1.0
# Date: 27/08/2020

# Version History
# 1.0.0 - First Version
# 1.1.0 - #1 Wrong error code when there is no SNMP community
# 1.2.0 - Added debug mode options
  #2 LTM Total table not showing lines that have changed
  #3 GTM objects in the HTML file when the device does not have GTM provision
# 1.2.1 - #4 Object showing as changed, when disable and status are the same
# 2.0.0
  # Added bash associative array
  # Added GTM Distributed Application
  # Added support for objects that has space in the name
# 2.0.1 - Changed Distributed Applications to Distributed Application to match singular used in other objects
# 2.1.0 - Added v16 to the version supported list

## Error Codes ##
# Script exit error codes

e_invalid_script_option=1
e_product_not_supported=2
e_software_version_not_supported=3
e_no_snmp_community=4
e_running_snmpwalk=5
e_no_before_upgrade_file=6
e_no_after_upgrade_file=7
e_unknown_bash_version=8
e_running_tmsh_ucs=9
e_running_qkview=10
e_generate_logs=11
e_multiple_options=12

## Variables ##
# No need to declare variables in Bash, but this is just to keep track

silent=0 # Indicates if script is running in silent mode
product="" # BIG-IP/BIG-IQ/etc..
supported_product=( BIG-IP ) # Produc supported by the script
supported_version=( 11 12 13 14 15 16 ) # List of versions the script supports
software_version="" # Software version used in the device
software_version_major="" # Major software version used in the device
bash_version="" # Bash version used in this device
bash_version_major="" # Major bash version used in this device
script_name="BIGdiff" # Script name
script_author="" # Script author
script_version="" # Script version
script_date="" # Script date
message="" # Variable used for text in the dialog program
provision_gtm=0 # Indicates if GTM is provisioned
snmp_community="" # SNMP community
ltm_oids="" # LTM OIDs for snmpwalk
gtm_oids="" # GTM OIDs for snmpwalk
bug_364556_versions=( 11.0.0 11.1.0 11.2.0 11.2.1 11.3.0 ) # Versions affected by bug 364556 - https://support.f5.com/csp/article/K14618
before_file="" # Before upgrade file with snmpwalk output
before_file_tmp="" # Before upgrade temporary file with snmpwalk output
after_file="" # After upgrade file with snmpwalk output
changes=0 # Number of changes found after upgrade
html_file="" # HTML file generated by the script
html_tables_file="" # Temporary HTML file to save the tables
temp_variable1="" # Temporary variable used in the script
temp_variable2="" # Temporary variable used in the script
temp_variable3="" # Temporary variable used in the script
index="" # Temporary variable used in the script
index2="" # Temporary variable used in the script
option="" # Temporary variable used in the script
fselect_option="" # Variable with the file name from fselect function
exit_status="" # Temporary variable used in the script
ucs_file="" # varibale to save UCS file name
qkview_file="" # varibale to save QKView file name
logs_file="" # varibale to save logs file name
# Multiple arrays to store objects
declare -a before_object_name
declare -a before_object_enabled
declare -a before_object_status
declare -a after_object_name
declare -a after_object_enabled
declare -a after_object_status
# Dialog exit Codes
dialog_cancel=1
dialog_esc=255
dialog_yes=0
dialog_no=1

## General ##
# Diverse functions

# Populate variables with information about the script
script_information_variables()
{
  script_author=`egrep "^# Author:" $0`
  script_author=${script_author/"# Author: "}
  script_version=`egrep "^# Version:" $0`
  script_version=${script_version/"# Version: "}
  script_date=`egrep "^# Date:" $0`
  script_date=${script_date/"# Date: "}
}
# Get bash version
get_bash_version()
{
  bash_version=$BASH_VERSION
  if [[ $bash_version == "" ]]
  then
    cli_error "Unknown Bash version" $e_unknown_bash_version
  else
    bash_version_major=${bash_version%%.*}
  fi
}
# Output error to CLI and exit
cli_error()
{
  echo "Error: $1."
  exit $2
}
# Ouptut error using dialog and exit
menu_error()
{
  dialog --backtitle "$script_name - $HOSTNAME - $product $software_version" --title "Error" --msgbox "$1." 0 0
  exit $2
}
# If silent mode just exit, otherwise call menu_error
error()
{
  if [[ $silent == 1 ]]
  then
    exit $2
  else
    menu_error "$1" "$2"
  fi
}
# Generate UCS file
generate_ucs()
{
  [[ $silent == 0 ]] && infobox "UCS" "Generating UCS..." 0 0
  ucs_file="/shared/tmp/${HOSTNAME}-${1}`date "+%Y%m%d%H%M%S"`.ucs"
  tmsh save sys ucs $ucs_file &> /dev/null
  [[ $? != 0 ]] && error "Failure to generate UCS" $e_running_tmsh_ucs
}
# Generate QKView file
# qkview script adds /var/tmp if the file destination does not starts with that, even when /shared/tmp/ is just a link to /var/tmp/
generate_qkview()
{
  [[ $silent == 0 ]] && infobox "QKView" "Generating QKView..." 0 0
  qkview_file="${HOSTNAME}-${1}`date "+%Y%m%d%H%M%S"`.qkview"
  qkview -f "/var/tmp/"$qkview_file &> /dev/null
  [[ $? != 0 ]] && error "Failure to generate QKView" $e_running_qkview
  qkview_file="/shared/tmp/$qkview_file"
}
# Generate single file with all logs
generate_logs()
{
  [[ $silent == 0 ]] && infobox "Logs" "Collecting full logs..." 0 0
  logs_file="/shared/tmp/${HOSTNAME}-${1}`date "+%Y%m%d%H%M%S"`.tar.gz"
  tar -czpf $logs_file /var/log/* &> /dev/null
  [[ $? > 1 ]] && error "Failure to generate logs file" $e_generate_logs
}

## Checks ##
# Check that this script can run in this system

# Check if the system is a supported F5 product
check_product()
{
  if [[ -f "/VERSION" ]]
  then
    product=`fgrep Product /VERSION`
    product=${product/"Product: "}
    printf "%s \n" ${supported_product[@]} | grep $product &> /dev/null
    [[ $? != 0 ]] && cli_error "Product not supported" $e_product_not_supported
  else
    cli_error "Product not supported, not a F5 device" $e_product_not_supported
  fi
}
# Check if the system is running a version that is supported by this script
check_version()
{
  if [[ -f "/VERSION" ]]
  then
    software_version=`fgrep Version /VERSION`
    software_version=${software_version/"Version: "}
    software_version_major=${software_version%%.*}
    printf "%s \n" ${supported_version[@]} | grep $software_version_major &> /dev/null
    [[ $? != 0 ]] && cli_error "Software version not suppported" $e_software_version_not_supported
  fi
}
# Check which modules are provisioned in the system
check_provision()
{
  # LTM Module
  # Most modules use LTM internally, so the script will show LTM even if it is not provisioned

  # GTM Module
  tmsh list sys provision gtm level &> /dev/null
  if [[ $? == 0 ]]
  then
    tmsh list sys provision gtm level 2> /dev/null | grep "level none" &> /dev/null
    [[ $? != 0 ]] && provision_gtm=1
  fi

  # Link Controller uses GTM Objects
  tmsh list sys provision lc level &> /dev/null
  if [[ $? == 0 ]]
  then
    tmsh list sys provision lc level 2> /dev/null | grep "level none" &> /dev/null
    [[ $? != 0 ]] && provision_gtm=1
  fi
}

## Options ##
# Get script Options

# Provide information about how to run the script
usage()
{
  echo "Usage: `basename $0` --option"
  echo "If no option is provided, the script will run in menu mode."
  echo "If any option is provided, excepting help or error, the script will run in silent mode."
  echo "In silent mode, no menu is presented, and script error is indicated by script exit code."
  echo "Options:"
  echo "before - Run script before change"
  echo "after - Run script after change"
  echo "before-without - Run script before change without backup"
  echo "after-without - Run script after change without backup"
  echo "backup - Generate backup files"
  echo "ucs - Generate UCS file"
  echo "qkview - Generate QKView file"
  echo "logs - Generate full logs file"
  echo "debug - Debug mode"
  echo "help - Print information about how to use the script"
  echo "error - Print information about error codes"
  echo "info - Script information"
  echo "support - List the versions the script supports"
  exit 0
}
# Output error code variables in the script code
error_codes()
{
  echo "Script exit error codes:"
  egrep "^e_" $0
  exit 0
}
# Output information about the script
script_information()
{
  echo "Author: $script_author"
  echo "Version: $script_version"
  echo "Date: $script_date"
}
# Output the versions the script supports
version_support()
{
  echo "The script should work with any version from 11.0.0."
  echo "However, it has only been tested on the following versions:"
  printf "%s.x.x " ${supported_version[@]}
  echo
  echo "If you want to use the script in a later version that has not been tested yet, change the following line on the script:"
  egrep "^supported_version" $0
}
# Option before - Run script before change
option_before()
{
  silent=1
  generate_ucs "before-"
  generate_qkview "before-"
  generate_logs "before-"
  get_snmp_community
  before_file=${HOSTNAME}-before-`date "+%Y%m%d%H%M%S"`".txt"
  run_snmpwalk $before_file
  echo $before_file
  echo $ucs_file
  echo $qkview_file
  echo $logs_file
}
# Option after - Run script after change
option_after()
{
  silent=1
  generate_ucs "after-"
  generate_qkview "after-"
  generate_logs "after-"
  get_snmp_community
  after_file=${HOSTNAME}-after-`date "+%Y%m%d%H%M%S"`".txt"
  run_snmpwalk $after_file
  get_before_file
  generate_results
  echo $before_file
  echo $after_file
  echo $html_file
  echo $ucs_file
  echo $qkview_file
  echo $logs_file
}
# Option before-without - Run script before change without backup
option_before-without()
{
  silent=1
  get_snmp_community
  before_file=${HOSTNAME}-before-`date "+%Y%m%d%H%M%S"`".txt"
  run_snmpwalk $before_file
  echo $before_file
}
# Option after-without - Run script after change without backup
option_after-without()
{
  silent=1
  get_snmp_community
  after_file=${HOSTNAME}-after-`date "+%Y%m%d%H%M%S"`".txt"
  run_snmpwalk $after_file
  get_before_file
  generate_results
  echo $before_file
  echo $after_file
  echo $html_file
}
# Option backup - Generate backup files
option_backup()
{
  silent=1
  generate_ucs ""
  generate_qkview ""
  generate_logs ""
  echo $ucs_file
  echo $qkview_file
  echo $logs_file
}
# Option ucs - Generate UCS file
option_ucs()
{
  silent=1
  generate_ucs ""
  echo $ucs_file
}
# Option qkview - Generate QKView file
option_qkview()
{
  silent=1
  generate_qkview ""
  echo $qkview_file
}
# Option logs - Generate full logs file
option_logs()
{
  silent=1
  generate_logs ""
  echo $logs_file
}
# Option debug - Debug mode
option_debug()
{
  silent=1
  get_before_file
  get_after_file
  generate_results
}
# Read the script arguments
get_options()
{
  case $1 in
    "--before") option_before;;
    "--after") option_after;;
    "--before-without") option_before-without;;
    "--after-without") option_after-without;;
    "--backup") option_backup;;
    "--ucs") option_ucs;;
    "--qkview") option_qkview;;
    "--logs") option_logs;;
    "--debug") option_debug;;
    "--help") usage;;
    "--error") error_codes;;
    "--info") script_information;;
    "--support") version_support;;
    *) cli_error "Invalid script option" $e_invalid_script_option;;
  esac
}

## Compare Objects ##
# Compare objects

# Get the first SNMP string available in the system
get_snmp_community()
{
  snmp_community=`tmsh list sys snmp communities | fgrep "community-name" | head -n1`
  [[ $snmp_community == "" ]] && error "There is no SNMP community setup" $e_no_snmp_community
  snmp_community=${snmp_community/"            community-name"}
}
# Run snmpwalk command to get the objects
run_snmpwalk()
{
  > $1
  [[ $silent == 0 ]] && menu_file_creating $1

  # LTM module
  ltm_oids=( ltmVsStatusEnabledState ltmVsStatusAvailState ltmPoolStatusEnabledState ltmPoolStatusAvailState \
  ltmPoolMbrStatusEnabledState ltmPoolMbrStatusAvailState ltmNodeAddrStatusEnabledState ltmNodeAddrStatusAvailState )
  for oid in ${ltm_oids[@]}
  do
    # -C I:  don't include the given OID, even if no results are returned
    # -O q:  quick print for easier parsing
    # -r RETRIES set the number of retries
    # -t TIMEOUT set the request timeout (in seconds)
    snmpwalk -CI -Oq -t30 -r0 -c $snmp_community localhost $oid >> $1
    [[ $? != 0 ]] && error "Failure to run snmpwalk" $e_running_snmpwalk
  done

  # bug 364556
  printf "%s \n" ${bug_364556_versions[@]} | grep "$software_version" &> /dev/null
  if [[ $? == 0 ]]
  then
    fgrep ".111.109.109.111.110." $1 &> /dev/null
    if [[ $? == 0 ]]
    then
      [[ $silent == 0 ]] && menu_bug_364556
      sed -i '/.111.109.109.111.110./d' $1
    fi
  fi

  # GTM Module
  if [[ $provision_gtm == 1 ]]
  then
    gtm_oids=( gtmDcStatusEnabledState gtmDcStatusAvailState gtmServerStatusEnabledState gtmServerStatusAvailState \
    gtmWideipStatusEnabledState gtmWideipStatusAvailState gtmPoolStatusEnabledState gtmPoolStatusAvailState  \
    gtmPoolMbrStatusEnabledState gtmPoolMbrStatusAvailState gtmVsStatusEnabledState gtmVsStatusAvailState \
    gtmProberPoolStatusEnabledState gtmProberPoolStatusAvailState gtmProberPoolMbrStatusEnabledState \
    gtmProberPoolMbrStatusAvailState gtmLinkStatusEnabledState gtmLinkStatusAvailState gtmAppStatusEnabledState gtmAppStatusAvailState )
    for oid in ${gtm_oids[@]}
    do
      # -C I:  don't include the given OID, even if no results are returned
      # -O q:  quick print for easier parsing
      # -r RETRIES set the number of retries
      # -t TIMEOUT set the request timeout (in seconds)
      snmpwalk -CI -Oq -t30 -r0 -c $snmp_community localhost $oid >> $1
      [[ $? != 0 ]] && error "Failure to run snmpwalk" $e_running_snmpwalk
      #sed -i 's/F5-BIGIP-GLOBAL-MIB:://' $1
    done
  fi
  [[ $silent == 0 ]] && menu_file_created $1
}
# Get before upgrade file
get_before_file()
{
  before_file=`ls | fgrep -- "-before-"`
  [[ $before_file == "" ]] && error "Could not find before upgrade file" $e_no_before_upgrade_file
}
# Get after upgrade file
get_after_file()
{
  after_file=""
  after_file=`ls | fgrep -- "-after-"`
  [[ $after_file == "" ]] && error "Could not find after upgrade file" $e_no_after_upgrade_file
}
# Get before upgrade file
get_before_file_menu()
{
  before_file_tmp=${HOSTNAME}-before-`date "+%Y%m%d%H%M%S"`".tmp"
  before_file=( $(ls | fgrep -- "-before-") )
  if [[ ${#before_file[@]} > 0 ]]
  then
    yesnobox "Files" "Do you want to use the following files as before change files?\n`echo ${before_file[@]}`" 0 0
    option=$?
  else
    option=$dialog_no
  fi
  if [[ $option == $dialog_no ]]
  then
    before_file=()
    while true
    do
      fselect
      before_file=( ${before_file[@]} $fselect_option )
      yesnobox "Files" "Do you want to select another file?" 0 0
      if [[ $? == $dialog_no ]]
      then
        break
      fi
    done
  fi
  for index in ${before_file[@]}
  do
    cat $index >> $before_file_tmp
  done
  before_file=$before_file_tmp
}
# Load before and after upgrade files to arrays - Bash version 4 or higher
load_files_v4()
{
  let temp_variable1=${#before_object_name[@]}-1
  for index in `seq 0 $temp_variable1`
  do
    before_object_enabled_v4[${before_object_name[$index]}]=${before_object_enabled[$index]}
    before_object_status_v4[${before_object_name[$index]}]=${before_object_status[$index]}
  done
  let temp_variable1=${#after_object_name[@]}-1
  for index in `seq 0 $temp_variable1`
  do
    after_object_enabled_v4[${after_object_name[$index]}]=${after_object_enabled[$index]}
    after_object_status_v4[${after_object_name[$index]}]=${after_object_status[$index]}
  done
}
# Load before and after upgrade files to arrays
load_files()
{
  case $1 in
    ltmPoolMbrStatusEnabledState)
      eval before_object_name=($(grep $1 $3 | cut -d'.' -f2- | xargs -d '\n' printf "'%s' "))
      let temp_variable1=${#before_object_name[@]}-1
      for index in `seq 0 $temp_variable1`
      do
        before_object_name[$index]=${before_object_name[$index]% enabled}
        before_object_name[$index]=${before_object_name[$index]% disabled}
        before_object_name[$index]="`echo -n ${before_object_name[$index]} | cut -d'"' -f2`+`echo -n ${before_object_name[$index]} | cut -d'"' -f4`+`echo -n ${before_object_name[$index]} | cut -d'"' -f5 | tr -d '.' | cut -d' ' -f1`"
      done
      eval after_object_name=($(grep $1 $4 | cut -d'.' -f2- | xargs -d '\n' printf "'%s' "))
      let temp_variable1=${#after_object_name[@]}-1
      for index in `seq 0 $temp_variable1`
      do
        after_object_name[$index]=${after_object_name[$index]% enabled}
        after_object_name[$index]=${after_object_name[$index]% disabled}
        after_object_name[$index]="`echo -n ${after_object_name[$index]} | cut -d'"' -f2`+`echo -n ${after_object_name[$index]} | cut -d'"' -f4`+`echo -n ${after_object_name[$index]} | cut -d'"' -f5 | tr -d '.' | cut -d' ' -f1`"
      done
      before_object_enabled=( $(grep $1 $3 | cut -d'"' -f5 | cut -d' ' -f2) )
      before_object_status=( $(grep $2 $3 | cut -d'"' -f5 | cut -d' ' -f2) )
      after_object_enabled=( $(grep $1 $4 | cut -d'"' -f5 | cut -d' ' -f2) )
      after_object_status=( $(grep $2 $4 | cut -d'"' -f5 | cut -d' ' -f2) )
      ;;
      gtmPoolMbrStatusEnabledState)
        eval before_object_name=($(grep $1 $3 | cut -d'.' -f2- | xargs -d '\n' printf "'%s' "))
        let temp_variable1=${#before_object_name[@]}-1
        for index in `seq 0 $temp_variable1`
        do
          before_object_name[$index]=${before_object_name[$index]% enabled}
          before_object_name[$index]=${before_object_name[$index]% disabled}
          before_object_name[$index]="`echo -n ${before_object_name[$index]} | cut -d'"' -f2`+`echo -n ${before_object_name[$index]} | cut -d'"' -f4`+`echo -n ${before_object_name[$index]} | cut -d'"' -f6`"
        done
        eval after_object_name=($(grep $1 $4 | cut -d'.' -f2- | xargs -d '\n' printf "'%s' "))
        let temp_variable1=${#after_object_name[@]}-1
        for index in `seq 0 $temp_variable1`
        do
          after_object_name[$index]=${after_object_name[$index]% enabled}
          after_object_name[$index]=${after_object_name[$index]% disabled}
          after_object_name[$index]="`echo -n ${after_object_name[$index]} | cut -d'"' -f2`+`echo -n ${after_object_name[$index]} | cut -d'"' -f4`+`echo -n ${after_object_name[$index]} | cut -d'"' -f6`"
        done
        before_object_enabled=( $(grep $1 $3 | cut -d'"' -f7 | tr -d ' ') )
        before_object_status=( $(grep $2 $3 | cut -d'"' -f7 | tr -d ' ') )
        after_object_enabled=( $(grep $1 $4 | cut -d'"' -f7 | tr -d ' ') )
        after_object_status=( $(grep $2 $4 | cut -d'"' -f7 | tr -d ' ') )
        ;;
        gtmVsStatusEnabledState|gtmProberPoolMbrStatusEnabledState)
          eval before_object_name=($(grep $1 $3 | cut -d'.' -f2- | xargs -d '\n' printf "'%s' "))
          let temp_variable1=${#before_object_name[@]}-1
          for index in `seq 0 $temp_variable1`
          do
            before_object_name[$index]=${before_object_name[$index]% enabled}
            before_object_name[$index]=${before_object_name[$index]% disabled}
            before_object_name[$index]="`echo -n ${before_object_name[$index]} | cut -d'"' -f2`+`echo -n ${before_object_name[$index]} | cut -d'"' -f4`"
          done
          eval after_object_name=($(grep $1 $4 | cut -d'.' -f2- | xargs -d '\n' printf "'%s' "))
          let temp_variable1=${#after_object_name[@]}-1
          for index in `seq 0 $temp_variable1`
          do
            after_object_name[$index]=${after_object_name[$index]% enabled}
            after_object_name[$index]=${after_object_name[$index]% disabled}
            after_object_name[$index]="`echo -n ${after_object_name[$index]} | cut -d'"' -f2`+`echo -n ${after_object_name[$index]} | cut -d'"' -f4`"
          done
          before_object_enabled=( $(grep $1 $3 | cut -d'"' -f5 | tr -d ' ') )
          before_object_status=( $(grep $2 $3 | cut -d'"' -f5 | tr -d ' ') )
          after_object_enabled=( $(grep $1 $4 | cut -d'"' -f5 | tr -d ' ') )
          after_object_status=( $(grep $2 $4 | cut -d'"' -f5 | tr -d ' ') )
          ;;
    *)
      eval before_object_name=($(grep $1 $3 | cut -d'"' -f2 | xargs -d '\n' printf '"%s" '))
      eval after_object_name=($(grep $1 $4 | cut -d'"' -f2 | xargs -d '\n' printf '"%s" '))
      before_object_enabled=( $(grep $1 $3 | cut -d'"' -f3 | tr -d ' ') )
      before_object_status=( $(grep $2 $3 | cut -d'"' -f3 | tr -d ' ') )
      after_object_enabled=( $(grep $1 $4 | cut -d'"' -f3 | tr -d ' ') )
      after_object_status=( $(grep $2 $4 | cut -d'"' -f3 | tr -d ' ') )
      ;;
  esac
  if [[ "${before_object_name[0]}" == "" ]] || [[ "${before_object_name[0]}" == "+" ]] || [[ "${before_object_name[0]}" == "++" ]]
  then
    before_object_name=()
  fi
  if [[ "${after_object_name[0]}" == "" ]] || [[ "${after_object_name[0]}" == "+" ]] || [[ "${after_object_name[0]}" == "++" ]]
  then
    after_object_name=()
  fi
  if [[ $bash_version_major > 3 ]]
  then
    load_files_v4
  fi
}
# Generate object table
generate_object_table_v4()
{
  [[ $# == 3 ]] && html_table_object_header "$1" "$2" "$3" >> $html_tables_file
  [[ $# == 4 ]] && html_table_object_header "$1" "$2" "$3" "$4" >> $html_tables_file
  [[ $# == 5 ]] && html_table_object_header "$1" "$2" "$3" "$4" "$5" >> $html_tables_file
  let temp_variable1=${#before_object_name[@]}-1
  for index in `seq 0 $temp_variable1`
  do
    if [[ ${after_object_enabled_v4[${before_object_name[index]}]} != "" ]]
    then
      if [[ ${before_object_enabled_v4[${before_object_name[index]}]} != ${after_object_enabled_v4[${after_object_name[index]}]} ]] || [[ ${before_object_status_v4[${before_object_name[index]}]} != ${after_object_status_v4[${after_object_name[index]}]} ]]
      then
        let changes=changes+1
        html_table_object_row "red" "${before_object_name[$index]}" ${before_object_enabled_v4[${before_object_name[index]}]} ${after_object_enabled_v4[${after_object_name[index]}]} \
        ${before_object_status_v4[${before_object_name[index]}]} ${after_object_status_v4[${after_object_name[index]}]} "Changed" >> $html_tables_file
      else
        html_table_object_row "white" "${before_object_name[$index]}" ${before_object_enabled_v4[${before_object_name[index]}]} ${after_object_enabled_v4[${after_object_name[index]}]} \
        ${before_object_status_v4[${before_object_name[index]}]} ${after_object_status_v4[${after_object_name[index]}]} "Same" >> $html_tables_file
      fi
    fi
  done
  html_table_object_tail >> $html_tables_file
}
# Generate object table
generate_object_table()
{
  if [[ $bash_version_major > 3 ]]
  then
    generate_object_table_v4 "${@}"
    return
  fi
  [[ $# == 3 ]] && html_table_object_header "$1" "$2" "$3" >> $html_tables_file
  [[ $# == 4 ]] && html_table_object_header "$1" "$2" "$3" "$4" >> $html_tables_file
  [[ $# == 5 ]] && html_table_object_header "$1" "$2" "$3" "$4" "$5" >> $html_tables_file
  let temp_variable1=${#before_object_name[@]}-1
  let temp_variable2=${#after_object_name[@]}-1
  for index in `seq 0 $temp_variable1`
  do
    # If the same device, most likely the order of the objects will be same for both files
    # To avoid a second loop, test if is the same first
    if [[ "${before_object_name[$index]}" == "${after_object_name[$index]}" ]]
    then
      if [[ ${before_object_enabled[$index]} != ${after_object_enabled[$index]} ]] || [[ ${before_object_status[$index]} != ${after_object_status[$index]} ]]
      then
        let changes=changes+1
        html_table_object_row "red" "${before_object_name[$index]}" ${before_object_enabled[$index]} ${after_object_enabled[$index]} \
        ${before_object_status[$index]} ${after_object_status[$index]} "Changed" >> $html_tables_file
      else
        html_table_object_row "white" "${before_object_name[$index]}" ${before_object_enabled[$index]} ${after_object_enabled[$index]} \
        ${before_object_status[$index]} ${after_object_status[$index]} "Same" >> $html_tables_file
      fi
    else
      for index2 in `seq 0 $temp_variable2`
      do
        if [[ "${before_object_name[$index]}" == "${after_object_name[$index2]}" ]]
        then
          if [[ ${before_object_enabled[$index]} != ${after_object_enabled[$index2]} ]] || [[ ${before_object_status[$index]} != ${after_object_status[$index2]} ]]
          then
            let changes=changes+1
            html_table_object_row "red" "${before_object_name[$index]}" ${before_object_enabled[$index]} ${after_object_enabled[$index2]} \
            ${before_object_status[$index]} ${after_object_status[$index2]} "Changed" >> $html_tables_file
          else
            html_table_object_row "white" "${before_object_name[$index]}" ${before_object_enabled[$index]} ${after_object_enabled[$index2]} \
            ${before_object_status[$index]} ${after_object_status[$index2]} "Same" >> $html_tables_file
          fi
        fi
      done
    fi
  done
  html_table_object_tail >> $html_tables_file
}
# Generate total table row
generate_total_table_row()
{
  if [[ ${#before_object_name[@]} == ${#after_object_name[@]} ]]
  then
    html_table_total_row "white" "$1" ${#before_object_name[@]} ${#after_object_name[@]} >> $html_file
  else
    let changes=changes+1
    html_table_total_row "red" "$1" ${#before_object_name[@]} ${#after_object_name[@]} >> $html_file
  fi
}
# Merge files, total table first and object tables after
merge_files()
{
  cat $html_tables_file >> $html_file
  rm -f $html_tables_file
  rm -f $before_file_tmp
}
# Generate the results to the HTML files
generate_results()
{
  html_file=${HOSTNAME}-html-`date "+%Y%m%d%H%M%S"`".html"
  html_tables_file=${HOSTNAME}-html-`date "+%Y%m%d%H%M%S"`".tmp"
  changes=0
  html_head > $html_file
  > $html_tables_file

  # LTM Module
  html_table_total_header "LTM" "ltm" >> $html_file

  # LTM Module Virtual
  [[ $silent == 0 ]] && infobox "Calculating" "Virtual Server..." 0 0
  load_files "ltmVsStatusEnabledState" "ltmVsStatusAvailState" $before_file $after_file
  generate_object_table "LTM - Virtual Server" "ltm_virtual_server" "Virtual Server"
  generate_total_table_row "Virtual Server"

  # LTM Module Pool
  [[ $silent == 0 ]] && infobox "Calculating" "LTM Pool..." 0 0
  load_files "ltmPoolStatusEnabledState" "ltmPoolStatusAvailState" $before_file $after_file
  generate_object_table "LTM - Pool" "ltm_pool" "Pool"
  generate_total_table_row "Pool"

  # LTM Module Pool Member
  [[ $silent == 0 ]] && infobox "Calculating" "LTM Pool Member..." 0 0
  load_files "ltmPoolMbrStatusEnabledState" "ltmPoolMbrStatusAvailState" $before_file $after_file
  generate_object_table "LTM - Pool Member" "ltm_pool_member" "Pool" "Node" "Port"
  generate_total_table_row "Pool Member"

  # LTM Module Node
  [[ $silent == 0 ]] && infobox "Calculating" "LTM Node..." 0 0
  load_files "ltmNodeAddrStatusEnabledState" "ltmNodeAddrStatusAvailState" $before_file $after_file
  generate_object_table "LTM - Node" "ltm_node" "Node"
  generate_total_table_row "Node"

  html_table_total_tail "LTM" >> $html_file

  # GTM Module
  if [[ $provision_gtm == 1 ]]
  then
    html_table_total_header "GTM" "gtm" >> $html_file

    # GTM Module Data Center
    [[ $silent == 0 ]] && infobox "Calculating" "GTM Data Center..." 0 0
    load_files "gtmDcStatusEnabledState" "gtmDcStatusAvailState" $before_file $after_file
    generate_object_table "GTM - Data Center" "gtm_data_center" "Data Center"
    generate_total_table_row "Data Center"

    # GTM Module Server
    [[ $silent == 0 ]] && infobox "Calculating" "GTM Server..." 0 0
    load_files "gtmServerStatusEnabledState" "gtmServerStatusAvailState" $before_file $after_file
    generate_object_table "GTM - Server" "gtm_server" "Server"
    generate_total_table_row "Server"

    # GTM Module Wide IP
    [[ $silent == 0 ]] && infobox "Calculating" "GTM Wide IP..." 0 0
    load_files "gtmWideipStatusEnabledState" "gtmWideipStatusAvailState" $before_file $after_file
    generate_object_table "GTM - Wide IP" "gtm_wideip" "Wide IP"
    generate_total_table_row "Wide IP"

    # GTM Module Pool
    [[ $silent == 0 ]] && infobox "Calculating" "GTM Pool..." 0 0
    load_files "gtmPoolStatusEnabledState" "gtmPoolStatusAvailState" $before_file $after_file
    generate_object_table "GTM - Pool" "gtm_pool" "Pool"
    generate_total_table_row "Pool"

    # GTM Module Pool Member
    [[ $silent == 0 ]] && infobox "Calculating" "GTM Pool Member..." 0 0
    load_files "gtmPoolMbrStatusEnabledState" "gtmPoolMbrStatusAvailState" $before_file $after_file
    generate_object_table "GTM - Pool Member" "gtm_pool_member" "Pool" "Server" "Virtual Server"
    generate_total_table_row "Pool Member"

    # GTM Module Virtual Server
    [[ $silent == 0 ]] && infobox "Calculating" "GTM Virtual Server..." 0 0
    load_files "gtmVsStatusEnabledState" "gtmVsStatusAvailState" $before_file $after_file
    generate_object_table "GTM - Virtual Server" "gtm_virtual_server" "Server" "Virtual Server"
    generate_total_table_row "Virtual Server"

    # GTM Module Prober Pool
    [[ $silent == 0 ]] && infobox "Calculating" "GTM Prober Pool..." 0 0
    load_files "gtmProberPoolStatusEnabledState" "gtmProberPoolStatusAvailState" $before_file $after_file
    generate_object_table "GTM - Prober Pool" "gtm_prober_pool" "Prober Pool"
    generate_total_table_row "Prober Pool"

    # GTM Module Prober Pool Member
    [[ $silent == 0 ]] && infobox "Calculating" "GTM Prober Pool Member..." 0 0
    load_files "gtmProberPoolMbrStatusEnabledState" "gtmProberPoolMbrStatusAvailState" $before_file $after_file
    generate_object_table "GTM - Prober Pool Member" "gtm_prober_pool_member" "Prober Pool" "Server"
    generate_total_table_row "Prober Pool Member"

    # GTM Module Link
    [[ $silent == 0 ]] && infobox "Calculating" "GTM Link..." 0 0
    load_files "gtmLinkStatusEnabledState" "gtmLinkStatusAvailState" $before_file $after_file
    generate_object_table "GTM - Link" "gtm_link" "Link"
    generate_total_table_row "Link"

    # GTM Module Distributed Application
    [[ $silent == 0 ]] && infobox "Calculating" "GTM Distributed Application..." 0 0
    load_files "gtmAppStatusEnabledState" "gtmAppStatusAvailState" $before_file $after_file
    generate_object_table "GTM - Distributed Application" "gtm_distributed_application" "Distributed Application"
    generate_total_table_row "Distributed Application"

    html_table_total_tail "GTM" >> $html_file
  fi

  merge_files
  html_tail >> $html_file
  if [[ $changes == 0 ]]
  then
    sed -i 's/0123456789/No changes/' $html_file
  else
    sed -i 's/0123456789/Changes found/' $html_file
  fi
  sed -i s\/1234567890\/$changes\/ $html_file
  [[ $silent == 0 ]] && menu_file_created $html_file
}

## HTML ##
# Create HTML code

# Code for first part of the HTMl file
html_head()
{
  echo "<html>"
  echo "<head>"
  echo "<title>$script_name</title>"
  cat <<'HereDocument'
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.10.20/css/jquery.dataTables.min.css">
<style type="text/css" class="init">
</style>
<script type="text/javascript" language="javascript" src="https://code.jquery.com/jquery-3.4.1.slim.min.js"></script>
<script type="text/javascript" language="javascript" src="https://cdn.datatables.net/1.10.20/js/jquery.dataTables.min.js"></script>
<script type="text/javascript" class="init">
$(document).ready(function() {
$('#total_ltm').DataTable();
$('#total_gtm').DataTable();
$('#ltm_virtual_server').DataTable();
$('#ltm_pool').DataTable();
$('#ltm_pool_member').DataTable();
$('#ltm_node').DataTable();
$('#gtm_data_center').DataTable();
$('#gtm_server').DataTable();
$('#gtm_wideip').DataTable();
$('#gtm_pool').DataTable();
$('#gtm_pool_member').DataTable();
$('#gtm_virtual_server').DataTable();
$('#gtm_prober_pool').DataTable();
$('#gtm_prober_pool_member').DataTable();
$('#gtm_link').DataTable();
$('#gtm_distributed_application').DataTable();
} );
</script>
HereDocument
  echo "</head>"
  echo "<body>"
  echo "<center>"
  echo "<p><font size="10">$script_name</font></p>"
  echo "<p><font size="5">`date`</font></p>"
  echo "<br>"
  echo "<p><font size="5">Status</font></p>"
  echo "<p><font size="4">0123456789</font></p>"
  echo "<p><font size="5">Number of Changes</font></p>"
  echo "<p><font size="4">1234567890</font></p>"
  echo "<br>"
}
# Code for last part of the HTMl file
# Includes TableFilter v0.6.21 to provide filtering functionality using Javascript to the tables
# http://koalyptus.github.io/TableFilter/
html_tail()
{
  echo "</center>"
  echo "</body>"
  echo "</html>"
}
# Code for first part of the total table
html_table_total_header()
{
  echo "<p><font size="5">${1} Total</font></p>"
  echo "<table id="total_${2}" class="compact" border="1">"
  echo "<thead>"
  echo "<tr>"
  echo "<th>Object</th>"
  echo "<th>Before Change</th>"
  echo "<th>After Change</th>"
  echo "</tr>"
  echo "</thead>"
  echo "<tbody>"
}
# Code for a row of the total table
html_table_total_row()
{
  echo "<tr>"
  echo "<td bgcolor="$1">$2</td>"
  echo "<td bgcolor="$1">$3</td>"
  echo "<td bgcolor="$1">$4</td>"
  echo "</tr>"
}
# Code for last part of the HTMl file
html_table_total_tail()
{
  echo "</tbody>"
  echo "</table>"
}
# Code for first part of the object table
html_table_object_header()
{
  echo "<p><font size="5">$1</font></p>"
  echo "<table id="$2" class="compact" border="1">"
  echo "<thead>"
  echo "<tr>"
  echo "<th>$3</th>"
  [[ $# > 3 ]] && echo "<th>$4</th>"
  [[ $# > 4 ]] && echo "<th>$5</th>"
  echo "<th>Before Change - Enabled</th>"
  echo "<th>After Change - Enabled</th>"
  echo "<th>Before Change - Status</th>"
  echo "<th>After Change - Status</th>"
  echo "<th>Result</th>"
  echo "</tr>"
  echo "</thead>"
  echo "<tbody>"
}
# Code for a row of the object table
html_table_object_row()
{
  echo "<tr>"
  temp_variable1=`grep -o '+' <<< $2 | wc -l`
  case $temp_variable1 in
    0) echo "<td bgcolor="$1">$2</td>";;
    1)
      echo "<td bgcolor="$1">`cut -d'+' -f1 <<< $2`</td>"
      echo "<td bgcolor="$1">`cut -d'+' -f2 <<< $2`</td>";;
    2)
        echo "<td bgcolor="$1">`cut -d'+' -f1 <<< $2`</td>"
        echo "<td bgcolor="$1">`cut -d'+' -f2 <<< $2`</td>"
        echo "<td bgcolor="$1">`cut -d'+' -f3 <<< $2`</td>";;
  esac
  echo "<td bgcolor="$1">$3</td>"
  echo "<td bgcolor="$1">$4</td>"
  echo "<td bgcolor="$1">$5</td>"
  echo "<td bgcolor="$1">$6</td>"
  echo "<td bgcolor="$1">$7</td>"
  echo "</tr>"
}
# Code for last part of the object table
html_table_object_tail()
{
  echo "</tbody>"
  echo "</table>"
}
## Menu ##
# Create dialog menus

# Display a dialog box with a message, with a ok button
msgbox()
{
  dialog --backtitle "$script_name - $HOSTNAME - $product $software_version" --title "$1" --msgbox "$2" $3 $4
}
# Display a dialog box with information, without buttons
infobox()
{
  dialog --backtitle "$script_name - $HOSTNAME - $product $software_version" --title "$1" --infobox "$2" $3 $4
}
# Display a dialog box with yes or no answer.
yesnobox()
{
  exec 3>&1
  option=`dialog --backtitle "$script_name - $HOSTNAME - $product $software_version" --title "$1" --yesno "$2" "$3" $4 2>&1 1>&3`
  exit_status=$?
  exec 3>&-
  if [[ $exit_status == $dialog_esc ]]
  then
    exit 0
  else
    return $exit_status
  fi
}
# Display a dialog box to select a file
fselect()
{
  while true
  do
    exec 3>&1
    option=`dialog --cancel-label "Exit" --backtitle "$script_name - $HOSTNAME - $product $software_version" --title "Select a file" --fselect \
      "${PWD}/" 0 0 2>&1 1>&3`
    exit_status=$?
    exec 3>&-
    if [[ $exit_status == $dialog_esc ]] || [[ $exit_status == $dialog_cancel ]]
    then
      exit 0
    else
      if [[ -f $option ]]
      then
        fselect_option=$option
        return
      else
        msgbox "Script Information" "The selected file is not valid.\nPress space to select a file." 0 0
      fi
    fi
  done
}
# Display a dialog menu with multiple options
menu_main()
{
  while true
  do
    exec 3>&1
    option=`dialog --cancel-label "Exit" --backtitle "$script_name - $HOSTNAME - $product $software_version" --title "Menu" --menu \
      "Select one option:" 0 0 10 \
      "1" "Run before change" \
      "2" "Run after change" \
      "3" "Run before change without backup" \
      "4" "Run after change without backup" \
      "5" "Generate backup files" \
      "6" "Generate UCS file" \
      "7" "Generate QKView file" \
      "8" "Generate full logs file" \
      "9" "Script information" \
      "10" "Version support" 2>&1 1>&3`
    exit_status=$?
    exec 3>&-
      if [[ $exit_status == $dialog_esc ]] || [[ $exit_status == $dialog_cancel ]]
      then
        exit 0
      fi
      option_${option}
   done
}
# Option 1 - Run script before change
option_1()
{
  generate_ucs "before-"
  generate_qkview "before-"
  generate_logs "before-"
  get_snmp_community
  before_file=${HOSTNAME}-before-`date "+%Y%m%d%H%M%S"`".txt"
  run_snmpwalk $before_file
}
# Option 2 - Run script after change
option_2()
{
  generate_ucs "after-"
  generate_qkview "after-"
  generate_logs "after-"
  get_before_file_menu
  get_snmp_community
  after_file=${HOSTNAME}-after-`date "+%Y%m%d%H%M%S"`".txt"
  run_snmpwalk $after_file
  generate_results
}
# Option 3 - Run script before change without backup
option_3()
{
  get_snmp_community
  before_file=${HOSTNAME}-before-`date "+%Y%m%d%H%M%S"`".txt"
  run_snmpwalk $before_file
}
# Option 4 - Run script after change without backup
option_4()
{
  get_before_file_menu
  get_snmp_community
  after_file=${HOSTNAME}-after-`date "+%Y%m%d%H%M%S"`".txt"
  run_snmpwalk $after_file
  generate_results
}
# Option 5 - Generate backup files
option_5()
{
  generate_ucs ""
  generate_qkview ""
  generate_logs ""
  msgbox "Backup" "Files generated sucessfully.\nUCS: ${ucs_file}\nQKView: ${qkview_file}\nLogs: ${logs_file}" 0 0
}
# Option 6 - Generate UCS file
option_6()
{
  generate_ucs ""
  msgbox "UCS" "File generated sucessfully.\n${ucs_file}" 0 0
}
# Option 7 - Generate QKView file
option_7()
{
  generate_qkview ""
  msgbox "QKView" "File generated sucessfully.\n${qkview_file}" 0 0
}
# Option 8 - Generate full logs file
option_8()
{
  generate_logs ""
  msgbox "Logs" "File generated sucessfully.\n${logs_file}" 0 0
}
# Option 9 - Script Information
option_9()
{
  message=`script_information`
  msgbox "Script Information" "$message" 0 0
}
# Option 10 - Version Support 
option_10()
{
  message=`version_support`
  msgbox "Version Support" "$message" 0 0
}
# Display a message about bug ID 364556
menu_bug_364556()
{
  message=`printf "This device is affected by the following bug:\nhttps://support.f5.com/csp/article/K14618\nSome pool members will be omitted from results."`
  msgbox "Bug Information" "$message" 0 0
}
# Display a message indicating that a file is been created
menu_file_creating(){
  message=`printf "File:\n$1\nIs been created..."`
  infobox "File" "$message" 0 0
}
# Display a message indicating that a file has been created
menu_file_created(){
  message=`printf "File:\n$1\nWas created sucessfully."`
  msgbox "File" "$message" 0 0
}

## Main ##
# Run the script functions

script_information_variables
get_bash_version
# If Bash version 4 or higher, create associative arrays in a global scope
if [[ $bash_version_major > 3 ]]
then
  declare -A before_object_enabled_v4
  declare -A before_object_status_v4
  declare -A after_object_enabled_v4
  declare -A after_object_status_v4
fi
check_version
check_provision
if [[ $# -eq 0 ]]
then
{
  menu_main
}
elif [[ $# -eq 1 ]]
then
  get_options $@
else
{
  cli_error "More than one option provided" $e_multiple_options
}
fi
exit 0
